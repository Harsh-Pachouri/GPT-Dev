{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":7715091,"sourceType":"datasetVersion","datasetId":4505706}],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom dataclasses import dataclass\nimport math\nimport torch\nimport torch.nn as nn\nimport tiktoken\nfrom torch.nn import functional as F\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-27T11:49:38.249409Z","iopub.execute_input":"2025-01-27T11:49:38.249721Z","iopub.status.idle":"2025-01-27T11:49:41.706045Z","shell.execute_reply.started":"2025-01-27T11:49:38.249694Z","shell.execute_reply":"2025-01-27T11:49:41.705294Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/llm-data-set-of-julius-caesar/input.txt\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"class CausalSelfAttention(nn.Module):\n\n  def __init__(self,config):\n    super().__init__()\n    assert config.n_embd % config.n_head==0\n\n    self.c_attn = nn.Linear(config.n_embd, 3*config.n_embd)\n    self.c_proj = nn.Linear(config.n_embd, config.n_embd)\n    self.c_proj.NANOGPT_SCALE_INIT=1\n    self.n_head = config.n_head\n    self.n_embd = config.n_embd\n\n    self.register_buffer(\"bias\", torch.tril(torch.ones(config.block_size, config.block_size)).view(1,1,config.block_size, config.block_size))\n\n  def forward(self, x):\n    B, T, C = x.size()\n    qkv = self.c_attn(x)\n    q, k, v = qkv.split(self.n_embd, dim=2)\n    k = k.view(B,T,self.n_head, C // self.n_head).transpose(1,2)\n    q = q.view(B,T,self.n_head, C // self.n_head).transpose(1,2)\n    v = v.view(B,T,self.n_head, C // self.n_head).transpose(1,2)\n\n#    att = (q @ k.transpose(-2,-1)) * (1.0/math.sqrt(k.size(-1)))\n#    att = att.masked_fill(self.bias[:,:,:T,:T].to(x.device)==0, -1e9)\n#    att = F.softmax(att,dim=-1)\n#    y=att @ v\n    y = F.scaled_dot_product_attention(q,k,v,is_causal=True)\n    y = y.transpose(1,2).contiguous().view(B,T,C)\n    y = self.c_proj(y)\n    return y\n\nclass MLP(nn.Module):\n\n  def __init__(self,config):\n    super().__init__()\n    self.c_fc =   nn.Linear(config.n_embd,4 * config.n_embd)\n    self.gelu =   nn.GELU(approximate='tanh')\n    self.c_proj = nn.Linear(4*config.n_embd, config.n_embd)\n    self.c_proj.NANOGPT_SCALE_INIT=1\n  def forward(self,x):\n    x = self.c_fc(x)\n    x = self.gelu(x)\n    x = self.c_proj(x)\n    return x\n\nclass Block(nn.Module):\n\n  def __init__(self,config):\n    super().__init__()\n    self.ln_1 = nn.LayerNorm(config.n_embd)\n    self.attn = CausalSelfAttention(config)\n    self.ln_2 = nn.LayerNorm(config.n_embd)\n    self.mlp = MLP(config)\n\n  def forward(self,x):\n    x = x + self.attn(self.ln_1(x))\n    x = x+ self.mlp(self.ln_2(x))\n    return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T11:49:47.298730Z","iopub.execute_input":"2025-01-27T11:49:47.299140Z","iopub.status.idle":"2025-01-27T11:49:47.308803Z","shell.execute_reply.started":"2025-01-27T11:49:47.299115Z","shell.execute_reply":"2025-01-27T11:49:47.307953Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"@dataclass\nclass GPTConfig:\n  block_size: int = 1024\n  vocab_size: int = 50257\n  n_layer: int = 12\n  n_head: int = 12\n  n_embd: int = 768\n\nclass GPT(nn.Module):\n\n  def __init__(self,config):\n    super().__init__()\n    self.config = config\n\n    self.transformer = nn.ModuleDict(dict(\n        wte = nn.Embedding(config.vocab_size, config.n_embd),\n        wpe = nn.Embedding(config.block_size, config.n_embd),\n        h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),\n        ln_f = nn.LayerNorm(config.n_embd),\n    ))\n    self.lm_head = nn.Linear(config.n_embd,config.vocab_size,bias=False)\n    self.transformer.wte.weight = self.lm_head.weight\n    self.apply(self._init_weight)\n\n  def _init_weight(self, module):\n    if isinstance(module, nn.Linear):\n      std=0.02\n      if hasattr(module, 'NONOGPT_SCALE_INIT'):\n        std*= (2*self.config.n_layer)**-0.5\n      torch.nn.init.normal_(module.weight,mean=0.0,std = std)\n      if module.bias is not None:\n        torch.nn.init.zeros_(module.bias)\n    elif isinstance(module, nn.Embedding):\n      torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\n\n\n\n  def forward(self,idx, targets = None):\n\n    B,T = idx.size()\n\n    assert T<= self.config.block_size, f\"Cannot forward sequence of length{T}, block size is only {self.config.block_size}\"\n    pos = torch.arange(0, T, dtype=torch.long, device = idx.device)\n    pos_emb = self.transformer.wpe(pos).to(device=idx.device)\n    tok_emb = self.transformer.wte(idx).to(device=idx.device)\n    x = tok_emb + pos_emb\n\n    for block in self.transformer.h:\n      x = block(x)\n\n    x = self.transformer.ln_f(x)\n    logits = self.lm_head(x)\n    loss=None\n    if targets is not None:\n      loss = F.cross_entropy(logits.view(-1,logits.size(-1)), targets.view(-1))\n    return logits, loss\n\n  @classmethod\n  def from_pretrained(cls,model_type):\n    assert model_type in {'gpt2', 'gpt2-medium', 'gpt2-large', 'gpt2-xl'}\n    from transformers import GPT2LMHeadModel\n    print(\"loading weights from pretrained gpt : %s\" %model_type)\n\n    config_args = {\n        'gpt2':         dict(n_layer=12, n_head=12, n_embd=768),\n        'gpt2-medium':  dict(n_layer=24, n_head=16, n_embd=1024),\n        'gpt2-large':   dict(n_layer=36, n_head=20, n_embd=1280),\n        'gpt2-xl':      dict(n_layer=48, n_head=25, n_embd=1600),\n    }[model_type]\n\n    config_args['vocab_size'] = 50257\n    config_args['block_size'] = 1024\n\n    config = GPTConfig(**config_args)\n    model = GPT(config)\n    sd = model.state_dict()\n    sd_keys=sd.keys()\n    sd_keys = [k for k in sd_keys if not k.endswith('.attn.bias')]\n\n    model_hf = GPT2LMHeadModel.from_pretrained(model_type)\n    sd_hf = model_hf.state_dict()\n\n    sd_keys_hf = sd_hf.keys()\n    sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.masked_bias')]\n    sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.bias')]\n    transposed = ['attn.c_attn.weight', 'attn.c_proj.weight','mlp.c_fc.weight','mlp.c_proj.weight']\n\n    assert len(sd_keys_hf) == len(sd_keys), f\"mismatched keys: {len(sd_keys_hf)}!= {len(sd_keys)} \"\n    for k in sd_keys_hf:\n      if any(k.endswith(w) for w in transposed):\n        assert sd_hf[k].shape[::-1]==sd[k].shape\n        with torch.no_grad():\n          sd[k].copy_(sd_hf[k].t())\n      else:\n        assert sd_hf[k].shape==sd[k].shape\n        with torch.no_grad():\n          sd[k].copy_(sd_hf[k])\n\n    return model\n\nfrom tiktoken import get_encoding  # Ensure tiktoken is installed\n\nimport torch\nimport torch.nn.functional as F\nfrom tiktoken import get_encoding  # Ensure tiktoken is installed\n\ndef generate_text(model, input_text, max_tokens=50, device='cpu'):\n  model.eval()  # Set model to evaluation mode\n  tokenizer = get_encoding(\"gpt2\")  # Use GPT-2 tokenizer from tiktoken\n\n  # Allow <|endoftext|> as a special token\n  eos_token_id = tokenizer.encode(\"<|endoftext|>\", allowed_special={\"<|endoftext|>\"}).pop()\n  input_ids = tokenizer.encode(input_text, allowed_special={\"<|endoftext|>\"})  # Tokenize the input text\n  input_tensor = torch.tensor(input_ids, dtype=torch.long).unsqueeze(0).to(device)  # Add batch dimension\n\n  # Generate tokens\n  generated_ids = input_tensor\n  for _ in range(max_tokens):\n    with torch.no_grad():\n      logits, _ = model(generated_ids)  # Forward pass\n      logits = logits[:, -1, :]  # Logits for the last token\n      probs = F.softmax(logits, dim=-1)  # Convert logits to probabilities\n      next_token = torch.multinomial(probs, num_samples=1)  # Sample next token\n      generated_ids = torch.cat((generated_ids, next_token), dim=1)  # Append new token\n\n      # Stop if the end-of-text token is generated\n      if next_token.item() == eos_token_id:\n        break\n\n  # Decode tokens back into text\n  generated_text = tokenizer.decode(generated_ids.squeeze().tolist())\n  return generated_text\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T12:23:28.581999Z","iopub.execute_input":"2025-01-27T12:23:28.582395Z","iopub.status.idle":"2025-01-27T12:23:28.599704Z","shell.execute_reply.started":"2025-01-27T12:23:28.582363Z","shell.execute_reply":"2025-01-27T12:23:28.598877Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"class DataLoaderLite:\n  def __init__(self, B,T):\n    self.B=B\n    self.T=T\n    with open('../input/llm-data-set-of-julius-caesar/input.txt', 'r') as f:\n      text = f.read()\n    enc = tiktoken.get_encoding('gpt2')\n    tokens = enc.encode(text)\n    self.tokens = torch.tensor(tokens)\n\n    self.current_position = 0\n\n  def next_batch(self):\n    B, T = self.B, self.T\n    buf = self.tokens[self.current_position:self.current_position + B*T+1]\n    x = (buf[:-1]).view(B,T)\n    y = (buf[1:]).view(B,T)\n\n    self.current_position+=B*T\n    if(self.current_position+(B*T+1)>len(self.tokens)):\n      self.current_position=0\n    return x, y\n\ntrain_loader = DataLoaderLite(B=4,T=32)\nmodel = GPT(GPTConfig(vocab_size=50304))\nmodel.to(device)\nmodel.eval()\nmodel=torch.compile(model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T11:53:55.954391Z","iopub.execute_input":"2025-01-27T11:53:55.954702Z","iopub.status.idle":"2025-01-27T11:53:58.721063Z","shell.execute_reply.started":"2025-01-27T11:53:55.954680Z","shell.execute_reply":"2025-01-27T11:53:58.720119Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"import torch._dynamo\ntorch._dynamo.config.suppress_errors = True\nmax_lr = 3e-4\nmin_lr = max_lr*0.1\nwarmup_steps=10\nmax_steps = 6400\ndef get_lr(it):\n  if it<=warmup_steps:\n    return max_lr*(it+1)/warmup_steps\n  if it>=max_steps:\n    return min_lr\n\n  decay_ratio = (it-warmup_steps)/(max_steps-warmup_steps)\n  assert 0<=decay_ratio<=1\n  coeff=0.5*(1.0+math.cos(math.pi*decay_ratio))\n  return min_lr + coeff*(max_lr-min_lr)\n\n\n\n# try B = 16, T=1024 once\noptimizer = torch.optim.AdamW(model.parameters(),lr=3e-4, betas = (0.9,0.95), eps=1e-8)\nfor step in range(max_steps):\n\n  x,y = train_loader.next_batch()\n  x,y = x.to(device), y.to(device)\n\n  optimizer.zero_grad()\n  logits, loss=model(x,y)\n  loss.backward()\n  norm = torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n  lr = get_lr(step)\n  for param_group in optimizer.param_groups:\n    param_group['lr']=lr\n\n  optimizer.step()\n  if step%100==0:\n      print(f\"step {step/100}, loss: {loss.item()}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T12:23:52.766444Z","iopub.execute_input":"2025-01-27T12:23:52.766745Z","iopub.status.idle":"2025-01-27T12:28:42.449752Z","shell.execute_reply.started":"2025-01-27T12:23:52.766725Z","shell.execute_reply":"2025-01-27T12:28:42.449031Z"}},"outputs":[{"name":"stdout","text":"step 0.0, loss: 4.793463706970215\nstep 1.0, loss: 4.222200393676758\nstep 2.0, loss: 4.877687931060791\nstep 3.0, loss: 5.016000747680664\nstep 4.0, loss: 5.631038665771484\nstep 5.0, loss: 3.718918561935425\nstep 6.0, loss: 3.694654703140259\nstep 7.0, loss: 5.947977066040039\nstep 8.0, loss: 5.425492286682129\nstep 9.0, loss: 4.687935829162598\nstep 10.0, loss: 5.350959300994873\nstep 11.0, loss: 3.2554471492767334\nstep 12.0, loss: 4.6971611976623535\nstep 13.0, loss: 3.5713982582092285\nstep 14.0, loss: 3.7373428344726562\nstep 15.0, loss: 4.734063148498535\nstep 16.0, loss: 4.9553446769714355\nstep 17.0, loss: 3.947911024093628\nstep 18.0, loss: 3.989579916000366\nstep 19.0, loss: 4.47072696685791\nstep 20.0, loss: 4.176405429840088\nstep 21.0, loss: 3.5901238918304443\nstep 22.0, loss: 4.920155048370361\nstep 23.0, loss: 4.2398481369018555\nstep 24.0, loss: 4.757312297821045\nstep 25.0, loss: 4.465263843536377\nstep 26.0, loss: 4.525702953338623\nstep 27.0, loss: 4.069891452789307\nstep 28.0, loss: 4.94545841217041\nstep 29.0, loss: 2.966393232345581\nstep 30.0, loss: 5.365368366241455\nstep 31.0, loss: 3.489349603652954\nstep 32.0, loss: 4.722701549530029\nstep 33.0, loss: 4.976803302764893\nstep 34.0, loss: 4.433227062225342\nstep 35.0, loss: 5.303548812866211\nstep 36.0, loss: 4.205689430236816\nstep 37.0, loss: 4.06691837310791\nstep 38.0, loss: 5.30253791809082\nstep 39.0, loss: 3.41172194480896\nstep 40.0, loss: 3.414947748184204\nstep 41.0, loss: 4.471884727478027\nstep 42.0, loss: 5.302488327026367\nstep 43.0, loss: 4.984645843505859\nstep 44.0, loss: 2.8790793418884277\nstep 45.0, loss: 4.314544677734375\nstep 46.0, loss: 3.354792594909668\nstep 47.0, loss: 3.0497846603393555\nstep 48.0, loss: 5.462601184844971\nstep 49.0, loss: 4.843151569366455\nstep 50.0, loss: 4.369205474853516\nstep 51.0, loss: 4.376513957977295\nstep 52.0, loss: 4.516275882720947\nstep 53.0, loss: 3.4973549842834473\nstep 54.0, loss: 4.337055206298828\nstep 55.0, loss: 4.26898717880249\nstep 56.0, loss: 3.9172725677490234\nstep 57.0, loss: 4.193431377410889\nstep 58.0, loss: 3.179013967514038\nstep 59.0, loss: 4.24676513671875\nstep 60.0, loss: 5.186776638031006\nstep 61.0, loss: 4.784199237823486\nstep 62.0, loss: 4.717959403991699\nstep 63.0, loss: 3.885180711746216\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"print(\"final loss=\")\nloss.item()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T11:59:09.112605Z","iopub.execute_input":"2025-01-27T11:59:09.112888Z","iopub.status.idle":"2025-01-27T11:59:09.118665Z","shell.execute_reply.started":"2025-01-27T11:59:09.112867Z","shell.execute_reply":"2025-01-27T11:59:09.117807Z"}},"outputs":[{"name":"stdout","text":"final loss=\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"4.077491283416748"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"save_path = \"/kaggle/working/trained_gpt_model.pth\"\n# Save the uncompiled model's state dictionary\ntorch.save(model.state_dict(), save_path)\nprint(f\"Model saved successfully at {save_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T12:11:07.617262Z","iopub.execute_input":"2025-01-27T12:11:07.617627Z","iopub.status.idle":"2025-01-27T12:11:08.419851Z","shell.execute_reply.started":"2025-01-27T12:11:07.617602Z","shell.execute_reply":"2025-01-27T12:11:08.418902Z"}},"outputs":[{"name":"stdout","text":"Model saved successfully at /kaggle/working/trained_gpt_model.pth\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# Load the state dictionary\nstate_dict = torch.load(\"trained_gpt_model.pth\", map_location=device)\n\n# Remove \"_orig_mod.\" prefix from keys\nadjusted_state_dict = {k.replace(\"_orig_mod.\", \"\"): v for k, v in state_dict.items()}\n\n# Load the adjusted state dictionary into a fresh model\nmodel = GPT(GPTConfig(vocab_size=50304))  # Reinitialize the model\nmodel.load_state_dict(adjusted_state_dict)\nmodel.to(device)\nmodel.eval()\nprint(\"Model loaded successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T12:14:10.262356Z","iopub.execute_input":"2025-01-27T12:14:10.262716Z","iopub.status.idle":"2025-01-27T12:14:13.346323Z","shell.execute_reply.started":"2025-01-27T12:14:10.262691Z","shell.execute_reply":"2025-01-27T12:14:13.345378Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-22-1ed0c49de78f>:2: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  state_dict = torch.load(\"trained_gpt_model.pth\", map_location=device)\n","output_type":"stream"},{"name":"stdout","text":"Model loaded successfully.\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"input_text = \"The question is\"\n\n# Generate text\noutput = generate_text(model, input_text, max_tokens=20, device=device)\nprint(\"Generated Text:\")\nprint(output)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T12:29:28.501918Z","iopub.execute_input":"2025-01-27T12:29:28.502240Z","iopub.status.idle":"2025-01-27T12:29:28.604729Z","shell.execute_reply.started":"2025-01-27T12:29:28.502216Z","shell.execute_reply":"2025-01-27T12:29:28.604033Z"}},"outputs":[{"name":"stdout","text":"Generated Text:\nThe question is theors.\n\nESCAL ChargO:\n hear't noidding:As face o\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}